const net = require('net');

const server = new net.createServer();

server.listen(8082);

server.on('connection', function (socket) {
  socket.on('data', function (chunk) {
    console.log(chunk)

    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)
    setTimeout(() => socket.write(chunk), 0)

    setTimeout(() => socket.write(chunk), 1100)
  });
});
